import asyncio

from dotenv import load_dotenv
import os
from typing import Dict
from datetime import datetime
from aiogram import Bot, Dispatcher, F
from aiogram.fsm.storage.redis import RedisStorage, DefaultKeyBuilder
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, StateFilter, Command, CommandObject
from aiogram.utils.deep_linking import create_start_link
import redis.asyncio as redis
import json
from copy import deepcopy
import random
import hashlib

from db.crud_user import *
from db.crud_deadline import *
from db.crud_group import *

from . import keyboards
from collections import defaultdict

load_dotenv()

bot = Bot(os.environ['BOT_TOKEN'])

redis_client = redis.Redis(host="localhost", port=6379, db=0)
storage = RedisStorage(redis=redis_client, key_builder=DefaultKeyBuilder(with_bot_id=True))
dp = Dispatcher(storage=storage)


# State Definitions


class MenuStates(StatesGroup):
    main_menu = State()


class AdminStates(StatesGroup):
    admin_menu = State()

    add_group = State()
    edit_group_name = State()

    add_option = State()
    edit_option_name = State()
    edit_option_channel = State()

    add_deadline = State()
    edit_deadline_name = State()
    edit_deadline_date = State()


admin_states_filter = StateFilter(*[state for state in AdminStates.__all_states__])


# Command Handlers


@dp.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await state.set_state(MenuStates.main_menu)

    user = await UserService.get_or_create(message.from_user)
    await message.answer("""–ü—Ä–∏–≤–µ—Ç! üëã
–Ø ‚Äî –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –Ω–∞ –ü–ú–ò –í–®–≠.

üìå –Ø —Å–ª–µ–∂—É –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –∫–∞–Ω–∞–ª–∞—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–æ–±—â–∞—é, –∫–æ–≥–¥–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞—Ä—ã–π.
üóì –¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤.

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ""", reply_markup=keyboards.get_menu_keyboard(user))


def generate_deadlines_list(deadlines: List[Deadline], by_group: bool = True):
    text = "‚è∞ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã:\n\n"

    if by_group:
        groups = defaultdict(list)

        for deadline in deadlines:
            name = f"{deadline.group_option.group.name} ({deadline.group_option.name})"
            groups[name].append(deadline)

        keys = sorted(groups.keys())

        for group in keys:
            text += f"<b>{group}</b>\n"
            for deadline in sorted(groups[group], key=lambda d: d.date):
                text += f"<i>[{deadline.date.strftime('%d.%m.%Y %H:%M')}]</i> {deadline.name}\n"
            text += "\n"
    else:
        for deadline in sorted(deadlines, key=lambda d: d.date):
            name = f"{deadline.group_option.group.name}, {deadline.group_option.name}"
            text += f"<i>[{deadline.date.strftime('%d.%m.%Y %H:%M')}]</i> {deadline.name} ({name})\n"

    return text.strip()


@dp.message(MenuStates.main_menu, F.text == keyboards.BTN_UPCOMING_DEADLINES)
async def upcoming_deadlines(message: Message, state: FSMContext):
    user = await UserService.get_or_create(message.from_user)
    deadlines = await DeadlineService.get_deadlines_for_user(user)

    if not deadlines:
        await message.answer("–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤.")
        return

    text = generate_deadlines_list(deadlines, by_group=True)
    keyboard = keyboards.get_deadlines_list_keyboard(by_group=True)

    await message.answer(text, reply_markup=keyboard, parse_mode='HTML')


@dp.callback_query(MenuStates.main_menu, F.data.startswith("deadlines_"))
async def toggle_deadlines_grouping(callback: CallbackQuery, state: FSMContext):
    by_group = callback.data.endswith("1")
    user = await UserService.get_or_create(callback.from_user)
    deadlines = await DeadlineService.get_deadlines_for_user(user)

    if not deadlines:
        await callback.answer("–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤.")
        return

    text = generate_deadlines_list(deadlines, by_group=by_group)
    keyboard = keyboards.get_deadlines_list_keyboard(by_group=by_group)

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()


@dp.message(MenuStates.main_menu, F.text == keyboards.BTN_MY_SUBSCRIPTIONS)
async def my_subscriptions(message: Message, state: FSMContext):
    user = await UserService.get_or_create(message.from_user)

    groups_list = await GroupService.get_list()
    subscriptions = await GroupService.get_subscriptions(user)

    kb = keyboards.get_subscriptions_keyboard(subscriptions, groups_list)

    await message.answer("–í—ã–±–µ—Ä–∏, –ø–æ –∫–∞–∫–∏–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", reply_markup=kb)


@dp.callback_query(MenuStates.main_menu, F.data.startswith("option_"))
async def toggle_subscription(callback: CallbackQuery, state: FSMContext):
    group_option_id = int(callback.data.split("_")[1])

    user = await UserService.get_or_create(callback.from_user)
    group_option = await GroupService.get_option(group_option_id)

    if not group_option:
        await callback.answer("–û—à–∏–±–∫–∞: –æ–ø—Ü–∏—è –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    await GroupService.toggle_subscription(user, group_option)

    text = "–í—ã–±–µ—Ä–∏, –ø–æ –∫–∞–∫–∏–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    kb = keyboards.get_subscriptions_keyboard(
        await GroupService.get_subscriptions(user),
        await GroupService.get_list()
    )

    await callback.message.edit_text(text, reply_markup=kb)
    await callback.answer()


@dp.message(MenuStates.main_menu, F.text == keyboards.BTN_ADMIN_PANEL)
async def admin_panel(message: Message, state: FSMContext):
    user = await UserService.get_or_create(message.from_user)

    if not user.is_admin:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    await state.set_state(AdminStates.admin_menu)
    await message.answer("–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=keyboards.get_admin_keyboard())


@dp.message(admin_states_filter, F.text == keyboards.BTN_ADMIN_EXIT)
async def exit_admin_panel(message: Message, state: FSMContext):
    await state.set_state(MenuStates.main_menu)

    user = await UserService.get_or_create(message.from_user)
    await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", reply_markup=keyboards.get_menu_keyboard(user))


@dp.message(AdminStates.admin_menu, F.text == keyboards.BTN_ADMIN_STATS)
async def admin_stats(message: Message, state: FSMContext):
    # await state.set_state(AdminStates.statistics)

    total_users = await UserService.users_count()
    total_groups = -1  # await GroupService.count_groups()
    total_deadlines = -1  # await DeadlineService.count_deadlines()

    stats_text = (
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üìö –ì—Ä—É–ø–ø: {total_groups}\n"
        f"‚è∞ –î–µ–¥–ª–∞–π–Ω–æ–≤: {total_deadlines}"
    )

    await message.answer(stats_text, parse_mode='Markdown')


@dp.message(AdminStates.admin_menu, F.text == keyboards.BTN_ADMIN_USERS)
async def manage_users(message: Message, state: FSMContext):
    # await state.set_state(AdminStates.manage_users)

    await message.answer("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")


@dp.message(AdminStates.admin_menu, F.text == keyboards.BTN_ADMIN_GROUPS)
async def manage_groups(message: Message, state: FSMContext):
    # await state.set_state(AdminStates.manage_groups)

    groups = await GroupService.get_list()

    await message.answer("–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø:", reply_markup=keyboards.get_admin_groups(groups))


@dp.callback_query(AdminStates.admin_menu, F.data == "add_group")
async def add_group(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.add_group)

    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:")
    await callback.answer()


@dp.message(AdminStates.add_group)
async def process_add_group(message: Message, state: FSMContext):
    group_name = message.text.strip()

    if not group_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    new_group = await GroupService.create_group(group_name)
    await message.answer(f"–ì—Ä—É–ø–ø–∞ '{new_group.name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await state.set_state(AdminStates.admin_menu)


@dp.callback_query(AdminStates.admin_menu, F.data.startswith("group_"))
async def manage_group_options(callback: CallbackQuery, state: FSMContext):
    group_id = int(callback.data.split("_")[1])
    group = await GroupService.get_group(group_id)

    if not group:
        await callback.answer("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    await callback.message.edit_text(
        f"–ì—Ä—É–ø–ø–∞: {group.name}",
        reply_markup=keyboards.get_admin_group_options(group)
    )
    await callback.answer()


@dp.callback_query(AdminStates.admin_menu, F.data.startswith("add_option"))
async def add_option(callback: CallbackQuery, state: FSMContext):
    group_id = int(callback.data.split("_")[2])
    group = await GroupService.get_group(group_id)

    if not group:
        await callback.answer("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    await state.set_state(AdminStates.add_option)
    await state.update_data(group_id=group_id)

    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ü–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã '{group.name}':")
    await callback.answer()


@dp.message(AdminStates.add_option)
async def process_add_option(message: Message, state: FSMContext):
    data = await state.get_data()
    group_id = data.get('group_id')

    if not group_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≥—Ä—É–ø–ø–∞.")
        return

    group = await GroupService.get_group(group_id)
    if not group:
        await message.answer("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    option_name = message.text.strip()

    if not option_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    new_option = await GroupService.create_option(group, option_name)
    await message.answer(f"–û–ø—Ü–∏—è '{new_option.name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É '{group.name}'!")
    await state.set_state(AdminStates.admin_menu)


@dp.callback_query(AdminStates.admin_menu, F.data.startswith("option_"))
async def manage_option(callback: CallbackQuery, state: FSMContext):
    option_id = int(callback.data.split("_")[1])
    option = await GroupService.get_option(option_id)
    deadlines = await DeadlineService.get_deadlines(option)

    if not option:
        await callback.answer("–û–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    group = option.group
    channel = f"t.me/c/{option.telegram_channel_id}/1" if option.telegram_channel_id else "–ù–µ —É–∫–∞–∑–∞–Ω"
    await callback.message.edit_text(
        f"{option.name} (–ì—Ä—É–ø–ø–∞: {group.name})\n\n–¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª: {channel}",
        reply_markup=keyboards.get_admin_option_keyboard(option, deadlines)
    )
    await callback.answer()


@dp.callback_query(AdminStates.admin_menu, F.data.startswith("add_deadline_"))
async def add_deadline(callback: CallbackQuery, state: FSMContext):
    option_id = int(callback.data.split("_")[2])
    option = await GroupService.get_option(option_id)

    if not option:
        await callback.answer("–û–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    await state.set_state(AdminStates.add_deadline)
    await state.update_data(option_id=option_id)

    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞ –¥–ª—è –æ–ø—Ü–∏–∏ '{option.name}':")
    await callback.answer()


@dp.callback_query(AdminStates.admin_menu, F.data.startswith("change_channel_"))
async def change_channel(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.edit_option_channel)
    await state.update_data(option_id=int(callback.data.split("_")[2]))
    await callback.message.answer("–ü–µ—Ä–µ—à–ª–∏ –ª—é–±–æ–π –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å")


@dp.message(AdminStates.edit_option_channel)
async def process_change_channel(message: Message, state: FSMContext):
    if not message.forward_from_chat:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏ –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞.")
        return

    channel_id = str(message.forward_from_chat.id)
    channel_name = message.forward_from_chat.title

    if not channel_id.startswith("-100"):
        await message.answer("–ù—É–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞!")

    channel_id = int(channel_id[3:])

    data = await state.get_data()
    option_id = data.get('option_id')

    if not option_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –æ–ø—Ü–∏—è.")
        return

    option = await GroupService.get_option(option_id)
    if not option:
        await message.answer("–û–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    option.telegram_channel_id = channel_id
    option.telegram_channel_name = channel_name
    await GroupService.update_option(option)

    await message.answer(f"–ö–∞–Ω–∞–ª '{channel_name}' —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ –æ–ø—Ü–∏–∏ '{option.name}'!")
    await state.set_state(AdminStates.admin_menu)


@dp.callback_query(AdminStates.admin_menu, F.data.startswith("deadline_"))
async def manage_deadline(callback: CallbackQuery, state: FSMContext):
    deadline_id = int(callback.data.split("_")[1])
    deadline = await DeadlineService.get_deadline(deadline_id)

    if not deadline:
        await callback.answer("–î–µ–¥–ª–∞–π–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    option = deadline.group_option
    group = option.group

    await callback.message.edit_text(
        f"–î–µ–¥–ª–∞–π–Ω: {deadline.name}\n"
        f"–î–∞—Ç–∞: {deadline.date.strftime('%d.%m.%Y %H:%M')}\n"
        f"üìÉ{group.name} ({option.name})",
        reply_markup=keyboards.get_admin_deadline_keyboard(deadline)
    )
    await callback.answer()


@dp.message(AdminStates.add_deadline)
async def process_add_deadline(message: Message, state: FSMContext):
    data = await state.get_data()
    option_id = data.get('option_id')

    if not option_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –æ–ø—Ü–∏—è.")
        return

    option = await GroupService.get_option(option_id)
    if not option:
        await message.answer("–û–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if not data.get('deadline_name'):
        deadline_name = message.text.strip()

        if not deadline_name:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return

        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2023 12:00):")
        await state.update_data(deadline_name=deadline_name)
    else:
        deadline_name = data['deadline_name']
        deadline_date_str = message.text.strip()

        try:
            deadline_date = datetime.strptime(deadline_date_str, "%d.%m.%Y %H:%M")
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú.")
            return

        await DeadlineService.update_deadline(option, deadline_name, deadline_date)
        await message.answer(f"–î–µ–¥–ª–∞–π–Ω '{deadline_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –æ–ø—Ü–∏–∏ '{option.name}'!")
        await state.set_state(AdminStates.admin_menu)
        await state.set_data({})


async def run_bot():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(run_bot())
